generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contacts     Contact[]
  applications Application[]
  tasks        Task[]
  documents    Document[]
  research     Research[]
  companies    Company[]
}

model Contact {
  id          String   @id @default(cuid())
  userId      String
  name        String
  email       String?
  phone       String?
  company     String?  // Keep old field for backwards compatibility
  companyId   String?  // New field for Company reference
  position    String?
  linkedinUrl String?
  notes       String?
  lastContact DateTime?
  nextContact DateTime?
  type        ContactType @default(OTHER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyRef    Company?       @relation(fields: [companyId], references: [id])
  communications Communication[]
  applications  Application[]
  tasks         Task[]
}

model Application {
  id           String   @id @default(cuid())
  userId       String
  company      String   // Keep old field for backwards compatibility
  companyId    String?  // New field for Company reference
  position     String
  location     String?
  salary       String?
  jobUrl       String?
  description  String?
  status       ApplicationStatus @default(INTERESTED)
  appliedDate  DateTime?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyRef   Company?     @relation(fields: [companyId], references: [id])
  contact      Contact?     @relation(fields: [contactId], references: [id])
  contactId    String?
  interviews   Interview[]
  documents    Document[]
  tasks        Task[]
}

model Interview {
  id            String   @id @default(cuid())
  applicationId String
  type          InterviewType
  scheduledAt   DateTime
  duration      Int? // in minutes
  location      String?
  interviewers  String[]
  notes         String?
  outcome       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model Communication {
  id        String   @id @default(cuid())
  contactId String
  type      CommunicationType
  subject   String?
  content   String?
  date      DateTime @default(now())
  duration  Int?     // minutes
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contact         Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
  followUpActions FollowUpAction[]
}

model Task {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String?
  dueDate       DateTime?
  completed     Boolean  @default(false)
  priority      Priority @default(MEDIUM)
  category      TaskCategory @default(OTHER)
  applicationId String?
  contactId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id])
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model Document {
  id            String   @id @default(cuid())
  userId        String
  applicationId String?
  type          DocumentType
  name          String
  url           String
  version       Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id])
}

model FollowUpAction {
  id              String   @id @default(cuid())
  communicationId String
  description     String
  dueDate         DateTime?
  completed       Boolean  @default(false)
  priority        Priority @default(MEDIUM)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  communication Communication @relation(fields: [communicationId], references: [id], onDelete: Cascade)
}

// Enums
enum ContactType {
  RECRUITER
  HIRING_MANAGER
  REFERRAL
  COLLEAGUE
  OTHER
}

enum ApplicationStatus {
  INTERESTED
  APPLIED
  SCREENING
  INTERVIEWING
  OFFER
  REJECTED
  WITHDRAWN
  ACCEPTED
}

enum InterviewType {
  PHONE_SCREEN
  TECHNICAL
  BEHAVIORAL
  ONSITE
  FINAL
  OTHER
}

enum CommunicationType {
  EMAIL
  PHONE
  LINKEDIN
  TEXT
  MEETING
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskCategory {
  APPLICATION
  FOLLOW_UP
  INTERVIEW_PREP
  NETWORKING
  RESUME
  OTHER
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  REFERENCE
  OTHER
}

enum CompanySize {
  STARTUP        // 1-10 employees
  SMALL          // 11-50 employees
  MEDIUM         // 51-200 employees
  LARGE          // 201-1000 employees
  ENTERPRISE     // 1000+ employees
  UNKNOWN
}

model Company {
  id          String   @id @default(cuid())
  userId      String
  name        String
  website     String?
  industry    String?
  size        CompanySize?
  location    String?
  description String?
  notes       String?
  founded     Int?     // year founded
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts     Contact[]
  applications Application[]

  @@unique([userId, name]) // Prevent duplicate company names per user
}

model Research {
  id          String       @id @default(cuid())
  userId      String
  title       String
  type        ResearchType @default(GENERAL)
  targetId    String?      // contactId, applicationId, or companyId
  targetType  TargetType?  // what the research is about
  
  // Research content
  summary     String?
  findings    String[]     @default([])
  notes       String?
  
  // Metadata
  importance  Priority     @default(MEDIUM)
  tags        String[]     @default([])
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  links       ResearchLink[]
}

model ResearchLink {
  id          String   @id @default(cuid())
  researchId  String
  title       String
  url         String
  description String?
  type        LinkType @default(OTHER)
  createdAt   DateTime @default(now())
  
  research    Research @relation(fields: [researchId], references: [id], onDelete: Cascade)
}

enum ResearchType {
  CONTACT
  COMPANY
  INDUSTRY
  COMPETITIVE
  GENERAL
}

enum TargetType {
  CONTACT
  APPLICATION
  COMPANY
}

enum LinkType {
  ARTICLE
  VIDEO
  SOCIAL
  COMPANY_PAGE
  NEWS
  GLASSDOOR
  LINKEDIN
  GITHUB
  OTHER
}